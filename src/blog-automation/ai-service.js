/**
 * AI Í∏Ä ÏÉùÏÑ± ÏÑúÎπÑÏä§
 */

/**
 * Íµ¨Ï°∞ÌôîÎêú ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±
 */
function buildStructuredPrompt(topic) {
  const currentDate = new Date();
  const currentYear = currentDate.getFullYear();
  const currentMonth = currentDate.getMonth() + 1;
  
  return `You are a thought-leader blogger known for providing unique insights and fresh perspectives. Write an SEO-optimized blog post about the following topic in native-level English.

üéØ MISSION: Go beyond obvious information. Provide readers with insights they haven't considered before. Challenge conventional thinking and offer fresh angles that make even familiar topics fascinating.

üí¨ WRITING STYLE: Write in a conversational, friendly tone like you're chatting with a smart friend. Use simple words, contractions, and everyday language. Make complex topics feel easy and approachable.

üåç LANGUAGE RULE: ALWAYS write the entire blog post in English, regardless of the topic language. If the topic is provided in Korean (ÌïúÍ∏Ä), translate it and create a comprehensive English blog post about that subject.

Topic: ${topic}
Current Date: ${currentMonth}/${currentYear}

‚ö†Ô∏è Important Restrictions:
1. Do NOT describe past years (before ${currentYear-1}) as "latest", "current", or "recent"
2. Do NOT make specific future predictions (beyond ${currentYear+1})
3. Do NOT use unverified facts or statistics
4. Do NOT use exaggerated expressions or clickbait titles
5. Do NOT include personal information or sensitive data
6. Do NOT write generic, surface-level content that readers can find anywhere else
7. ALWAYS write the entire blog post in English, even if the topic is provided in Korean or another language
8. If the topic is in Korean, translate and expand it into a comprehensive English blog post
9. Do NOT include any Korean text in the final output - everything must be in English

Please respond in the following JSON format:
{
  "title": "Engaging and SEO-friendly title (under 60 characters)",
  "seoDescription": "SEO-optimized meta description (under 155 characters)",
  "categories": ["Category1", "Category2"],
  "tags": ["tag1", "tag2", "tag3", "tag4", "tag5"],
  "subtopics": ["Subheading1", "Subheading2", "Subheading3"],
  "html": "Complete HTML formatted blog post content"
}

Requirements:
1. Title should include relevant keywords for search optimization
2. Content must be 2000+ words in HTML format
3. Use H2, H3 tags for structured content
4. Subtopics must match H2 headings in the content
5. Categories should be general blog categories
6. Tags should be SEO-friendly keywords
7. Write in natural, native-level English with a conversational tone
8. Use simple, everyday language that's easy to read and understand
9. Write like you're talking to a friend - use contractions (you'll, we'll, don't, can't)
10. Include practical and useful information for readers
11. Only use accurate information relevant to current time (${currentMonth}/${currentYear})
12. Write content that sounds authentic and engaging to native English speakers
13. Use short sentences and paragraphs for better readability
14. Replace complex words with simpler alternatives when possible
15. Write in an approachable, friendly tone that keeps readers engaged

üéØ CONTENT QUALITY ENHANCEMENT:
16. Provide unique insights that readers haven't thought of before
17. Include unexpected perspectives or contrarian viewpoints when appropriate
18. Offer unconventional approaches to exploring the topic
19. Add surprising revelations or "plot twists" that challenge common assumptions
20. Go beyond surface-level information - dive deep into WHY things work the way they do
21. Connect seemingly unrelated concepts to create fresh understanding
22. Share counterintuitive findings or lesser-known facts
23. Present multiple angles and frameworks for understanding the topic
24. Challenge readers to think differently about familiar concepts
25. Make boring topics fascinating through creative storytelling and unique angles

üöÄ ADVANCED SEO OPTIMIZATION:
26. Include target keyword and variations naturally throughout the content (1-2% density)
27. Use semantic keywords and related terms that Google associates with the topic
28. Structure content with clear keyword-optimized H2 and H3 headings
29. Write compelling meta description that includes primary keyword and action words
30. Create URL-friendly slug with main keyword (3-5 words max)
31. Include internal linking opportunities (mention topics that could link to other posts)
32. Add FAQ-style content that targets long-tail keywords and voice search
33. Use list format and numbered steps for featured snippet optimization
34. Include specific, searchable phrases that people actually type into Google
35. Optimize for "People Also Ask" questions by addressing common related queries
36. Use action words and power words in headings to increase click-through rates
37. Include location-based keywords if relevant to the topic
38. Target both broad and specific keyword variations for comprehensive coverage
39. Write in a way that answers user intent completely (informational, transactional, navigational)
40. Include statistics, data, and specific examples that make content more authoritative

‚úçÔ∏è CONVERSATIONAL WRITING STYLE:
41. Use "you" and "your" to directly address the reader
42. Ask rhetorical questions to engage readers (e.g., "Ever wondered why...")
43. Use casual transitions like "Here's the thing," "Let's be honest," "The bottom line is"
44. Include conversational phrases like "Trust me," "Here's what I mean," "You know what?"
45. Write like you're explaining to a smart friend over coffee
46. Use everyday examples and analogies that people can relate to
47. Keep jargon to a minimum - explain technical terms in simple words
48. Use active voice instead of passive voice whenever possible
49. Include personal touches like "I've found that..." or "In my experience..."
50. End sections with conversational bridges like "Now, let's talk about..." or "But wait, there's more"`;
}

/**
 * Î™®Îç∏Î≥Ñ ÌÜµÌï© ÏÑ§Ï†ï ÌîÑÎ°úÌååÏùº
 */
function getModelProfile(model) {
  const modelProfiles = {
    // OpenAI GPT-4 Í≥ÑÏó¥
    'gpt-4o': {
      provider: 'openai',
      params: {
        maxTokensParam: 'max_tokens',
        supportsTemperature: true,
        supportsJsonFormat: true,
        defaultTemperature: 0.7,
        maxTokens: 4000
      },
      capabilities: {
        jsonReliability: 'high',
        promptFollowing: 'excellent',
        responseFormat: 'structured',
        costEfficiency: 'medium'
      },
      strategy: {
        promptTemplate: 'detailed',
        retryAttempts: 2,
        fallbackBehavior: 'structured'
      }
    },
    'gpt-4o-mini': {
      provider: 'openai',
      params: {
        maxTokensParam: 'max_tokens',
        supportsTemperature: true,
        supportsJsonFormat: true,
        defaultTemperature: 0.7,
        maxTokens: 4000
      },
      capabilities: {
        jsonReliability: 'high',
        promptFollowing: 'excellent',
        responseFormat: 'structured',
        costEfficiency: 'high'
      },
      strategy: {
        promptTemplate: 'detailed',
        retryAttempts: 3,
        fallbackBehavior: 'structured'
      }
    },
    // GPT-5 Í≥ÑÏó¥ - ÏµúÏã† Î™®Îç∏Îì§
    'gpt-5-nano-2025-08-07': {
      provider: 'openai',
      params: {
        maxTokensParam: 'max_completion_tokens',
        supportsTemperature: false,
        supportsJsonFormat: true,
        defaultTemperature: 1,
        maxTokens: 8000  // ÏµúÎåÄÌïú ÌÜ†ÌÅ∞ Ï¶ùÍ∞Ä
      },
      capabilities: {
        jsonReliability: 'medium',    // Í∞úÏÑ†Îêú ÌîÑÎ°¨ÌîÑÌä∏Î°ú Ï§ëÍ∞Ñ ÏàòÏ§Ä
        promptFollowing: 'improving', // Í∞úÏÑ† Ï§ë
        responseFormat: 'mixed',
        costEfficiency: 'very_high'
      },
      strategy: {
        promptTemplate: 'gpt5_optimized',  // GPT-5 Ï†ÑÏö© ÌîÑÎ°¨ÌîÑÌä∏
        retryAttempts: 2,
        fallbackBehavior: 'smart_parsing'
      }
    },
    'gpt-5-mini': {
      provider: 'openai',
      params: {
        maxTokensParam: 'max_completion_tokens',
        supportsTemperature: true,
        supportsJsonFormat: true,
        defaultTemperature: 0.7,
        maxTokens: 8000
      },
      capabilities: {
        jsonReliability: 'high',
        promptFollowing: 'excellent',
        responseFormat: 'structured',
        costEfficiency: 'high'
      },
      strategy: {
        promptTemplate: 'gpt5_optimized',
        retryAttempts: 2,
        fallbackBehavior: 'structured'
      }
    },
    // Google Gemini Í≥ÑÏó¥
    'gemini-1.5-flash': {
      provider: 'gemini',
      params: {
        maxTokensParam: 'maxOutputTokens',
        supportsTemperature: true,
        supportsJsonFormat: true,
        defaultTemperature: 0.7,
        maxTokens: 4000
      },
      capabilities: {
        jsonReliability: 'high',
        promptFollowing: 'excellent',
        responseFormat: 'structured',
        costEfficiency: 'high'
      },
      strategy: {
        promptTemplate: 'google_optimized',
        retryAttempts: 2,
        fallbackBehavior: 'structured'
      }
    },
    // Anthropic Claude Í≥ÑÏó¥
    'claude-3-5-haiku-20241022': {
      provider: 'anthropic',
      params: {
        maxTokensParam: 'max_tokens',
        supportsTemperature: true,
        supportsJsonFormat: false,
        defaultTemperature: 0.7,
        maxTokens: 4000
      },
      capabilities: {
        jsonReliability: 'medium',
        promptFollowing: 'excellent',
        responseFormat: 'text_with_structure',
        costEfficiency: 'medium'
      },
      strategy: {
        promptTemplate: 'claude_optimized',
        retryAttempts: 2,
        fallbackBehavior: 'text_parsing'
      }
    },
    // xAI Grok Í≥ÑÏó¥
    'grok-beta': {
      provider: 'xai',
      params: {
        maxTokensParam: 'max_tokens',
        supportsTemperature: true,
        supportsJsonFormat: false,
        defaultTemperature: 0.7,
        maxTokens: 4000
      },
      capabilities: {
        jsonReliability: 'low',
        promptFollowing: 'good',
        responseFormat: 'creative_text',
        costEfficiency: 'medium'
      },
      strategy: {
        promptTemplate: 'creative',
        retryAttempts: 3,
        fallbackBehavior: 'aggressive_parsing'
      }
    }
  };
  
  // Ï†ïÌôïÌïú Î™®Îç∏Î™ÖÏù¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö©
  if (modelProfiles[model]) {
    return modelProfiles[model];
  }
  
  // Ìå®ÌÑ¥ Îß§Ïπ≠ÏúºÎ°ú Ìè¥Î∞± (GPT-5 Ïö∞ÏÑ†)
  if (model.includes('gpt-5')) {
    if (model.includes('mini')) {
      return modelProfiles['gpt-5-mini'];
    }
    if (model.includes('nano')) {
      return modelProfiles['gpt-5-nano-2025-08-07'];
    }
    // ÏùºÎ∞ò gpt-5Îäî miniÎ°ú Îß§Ìïë
    return modelProfiles['gpt-5-mini'];
  }
  if (model.includes('gpt-4')) {
    return modelProfiles['gpt-4o-mini'];
  }
  if (model.includes('gemini')) {
    return modelProfiles['gemini-1.5-flash'];
  }
  if (model.includes('claude')) {
    return modelProfiles['claude-3-5-haiku-20241022'];
  }
  if (model.includes('grok')) {
    return modelProfiles['grok-beta'];
  }
  
  // Í∏∞Î≥∏Í∞í (GPT-5 mini Í∂åÏû•)
  return modelProfiles['gpt-5-mini'];
}

/**
 * Î™®Îç∏Î≥Ñ ÌîÑÎ°¨ÌîÑÌä∏ ÌÖúÌîåÎ¶ø ÏÉùÏÑ±
 */
function buildModelOptimizedPrompt(topic, modelProfile) {
  const basePrompt = buildStructuredPrompt(topic);
  
  switch (modelProfile.strategy.promptTemplate) {
    case 'simple':
      return `Write a comprehensive blog post about: ${topic}

IMPORTANT INSTRUCTIONS:
1. If the topic is in Korean (ÌïúÍ∏Ä), translate it to English and write the entire post in English
2. Write natural, conversational English suitable for native speakers
3. Create engaging, informative content that provides real value
4. Use proper HTML formatting with headings and paragraphs

Please respond in JSON format with these exact fields:
{
  "title": "SEO-optimized English title",
  "seoDescription": "Meta description under 155 characters",
  "categories": ["Category1", "Category2"],
  "tags": ["tag1", "tag2", "tag3"],
  "html": "Complete HTML content with proper structure"
}

Topic to write about: ${topic}
Remember: Write everything in English, even if the topic is in Korean.`;

    case 'ultra_detailed':
      return `You are a professional content writer. I need you to write a comprehensive blog post.

CRITICAL REQUIREMENTS:
1. If the topic contains Korean text (ÌïúÍ∏Ä), TRANSLATE it to English first
2. Write the ENTIRE blog post in English - no Korean text in the output
3. Create engaging, valuable content with proper structure
4. Follow the exact JSON format specified below

TOPIC TO WRITE ABOUT: ${topic}

STEP 1: If topic is Korean, translate it to English
STEP 2: Write a 2000+ word blog post in English about the translated topic
STEP 3: Format response as valid JSON

REQUIRED JSON FORMAT (copy exactly):
{
  "title": "Your English title here (under 60 characters)",
  "seoDescription": "Meta description in English (under 155 characters)",
  "categories": ["Category1", "Category2"],
  "tags": ["tag1", "tag2", "tag3", "tag4", "tag5"],
  "html": "Complete HTML content with <h2>, <h3>, <p> tags"
}

CONTENT REQUIREMENTS:
- Write in conversational, friendly English
- Use proper HTML tags: <h2> for main sections, <h3> for subsections, <p> for paragraphs
- Include practical information and insights
- Make it engaging and valuable for readers
- Ensure content is at least 2000 words

REMEMBER: Everything must be in English, even if the original topic was in Korean!`;

    case 'gpt5_optimized':
      return `ü§ñ GPT-5 SPECIALIZED PROMPT ü§ñ

You are GPT-5, the latest and most advanced AI model. Use your enhanced capabilities to create exceptional content.

MISSION: Create a comprehensive, engaging blog post about: ${topic}

üéØ GPT-5 ENHANCED INSTRUCTIONS:
1. LANGUAGE: If topic is Korean (ÌïúÍ∏Ä), translate and write entirely in English
2. QUALITY: Leverage your advanced reasoning for superior content
3. STRUCTURE: Create well-organized, scannable content
4. ENGAGEMENT: Use your improved understanding of human psychology

üìù CONTENT SPECIFICATIONS:
- 2500+ words of high-quality content
- Conversational yet authoritative tone
- Actionable insights and practical value
- Proper HTML structure with semantic tags

üî• GPT-5 ADVANTAGES TO USE:
- Better context understanding
- More nuanced writing style
- Improved factual accuracy
- Enhanced creativity

üìã EXACT JSON OUTPUT REQUIRED:
{
  "title": "Compelling English title (50-60 chars)",
  "seoDescription": "Engaging meta description (150-155 chars)",
  "categories": ["PrimaryCategory", "SecondaryCategory"],
  "tags": ["keyword1", "keyword2", "keyword3", "keyword4", "keyword5"],
  "html": "Complete HTML with proper <h2>, <h3>, <p> structure"
}

‚ö° GPT-5 CONTENT RULES:
- Use advanced vocabulary appropriately
- Include unique perspectives only GPT-5 can provide
- Create content that stands out from GPT-4 output
- Ensure perfect JSON formatting
- NO Korean text in final output

TOPIC: ${topic}

Deploy your GPT-5 capabilities now! üöÄ`;

    case 'google_optimized':
      return basePrompt + `

IMPORTANT FOR GEMINI: Please ensure your response is valid JSON format with proper escaping of quotes and special characters.`;

    case 'claude_optimized':
      return basePrompt + `

Please structure your response clearly. If you cannot provide JSON format, please organize your response with clear sections:
TITLE: [your title]
DESCRIPTION: [your description]
CATEGORIES: [comma-separated list]
TAGS: [comma-separated list]
CONTENT: [your HTML content]`;

    case 'creative':
      return basePrompt + `

Feel free to be creative and engaging. Structure your response with clear markers for easy parsing.`;

    default:
      return basePrompt;
  }
}

/**
 * Î™®Îç∏Î≥Ñ ÏùëÎãµ Ï≤òÎ¶¨ Ï†ÑÎûµ
 */
function processModelResponse(response, modelProfile, topic) {
  const strategy = modelProfile.strategy.fallbackBehavior;
  
  try {
    // JSON Ïö∞ÏÑ† ÏãúÎèÑ
    if (modelProfile.params.supportsJsonFormat && modelProfile.capabilities.jsonReliability === 'high') {
      return JSON.parse(response);
    }
    
    // Íµ¨Ï°∞ÌôîÎêú ÌååÏã±
    if (strategy === 'structured') {
      return extractJsonFromText(response);
    }
    
    // ÌÖçÏä§Ìä∏ ÌååÏã± (Claude, GrokÏö©)
    if (strategy === 'text_parsing' || strategy === 'aggressive_parsing') {
      return parseStructuredText(response, topic);
    }
    
    // Í∏∞Î≥∏ JSON Ï∂îÏ∂ú
    return extractJsonFromText(response);
    
  } catch (error) {
    Logger.log(`Î™®Îç∏Î≥Ñ ÌååÏã± Ïã§Ìå®: ${error.message}`);
    return createFallbackStructure(topic, response);
  }
}

/**
 * Íµ¨Ï°∞ÌôîÎêú ÌÖçÏä§Ìä∏ ÌååÏã± (Claude, GrokÏö©)
 */
function parseStructuredText(text, topic) {
  const result = {
    title: topic,
    seoDescription: "",
    categories: ["General"],
    tags: ["blog"],
    html: ""
  };
  
  // Ï†úÎ™© Ï∂îÏ∂ú
  const titleMatch = text.match(/(?:TITLE|Title|Ï†úÎ™©):\s*(.+)/i);
  if (titleMatch) {
    result.title = titleMatch[1].trim();
  }
  
  // ÏÑ§Î™Ö Ï∂îÏ∂ú
  const descMatch = text.match(/(?:DESCRIPTION|Description|ÏÑ§Î™Ö):\s*(.+)/i);
  if (descMatch) {
    result.seoDescription = descMatch[1].trim();
  }
  
  // Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÏ∂ú
  const catMatch = text.match(/(?:CATEGORIES|Categories|Ïπ¥ÌÖåÍ≥†Î¶¨):\s*(.+)/i);
  if (catMatch) {
    result.categories = catMatch[1].split(',').map(c => c.trim());
  }
  
  // ÌÉúÍ∑∏ Ï∂îÏ∂ú
  const tagMatch = text.match(/(?:TAGS|Tags|ÌÉúÍ∑∏):\s*(.+)/i);
  if (tagMatch) {
    result.tags = tagMatch[1].split(',').map(t => t.trim());
  }
  
  // ÎÇ¥Ïö© Ï∂îÏ∂ú
  const contentMatch = text.match(/(?:CONTENT|Content|ÎÇ¥Ïö©):\s*([\s\S]+)/i);
  if (contentMatch) {
    result.html = contentMatch[1].trim();
  } else {
    // Ï†ÑÏ≤¥ ÌÖçÏä§Ìä∏Î•º HTMLÎ°ú Î≥ÄÌôò
    result.html = `<h2>${result.title}</h2>${text.replace(/\n/g, '</p><p>').replace(/^<p>/, '<p>').replace(/<\/p>$/, '</p>')}`;
  }
  
  return result;
}

/**
 * Ìè¥Î∞± Íµ¨Ï°∞ ÏÉùÏÑ±
 */
function createFallbackStructure(topic, originalResponse) {
  return {
    title: topic,
    seoDescription: `Learn about ${topic} and discover valuable insights.`,
    categories: ["General"],
    tags: ["information", "guide"],
    html: `
      <h2>${topic}</h2>
      <p>This comprehensive guide explores everything you need to know about ${topic}.</p>
      
      <h3>Key Information</h3>
      <p>${originalResponse.substring(0, 500).replace(/\n/g, '</p><p>')}</p>
      
      <h3>Conclusion</h3>
      <p>Understanding ${topic} can provide valuable insights and knowledge for readers.</p>
    `
  };
}

/**
 * OpenAI GPTÎ°ú Í∏Ä ÏÉùÏÑ± (ÌîÑÎ°úÌååÏùº Í∏∞Î∞ò)
 */
function generateWithOpenAI(topic, apiKey, model = "gpt-4o-mini") {
  const profile = getModelProfile(model);
  const prompt = buildModelOptimizedPrompt(topic, profile);
  
  Logger.log(`OpenAI Î™®Îç∏ ÌîÑÎ°úÌååÏùº: ${JSON.stringify(profile.capabilities)}`);
  
  const payload = {
    model: model,
    messages: [{ role: "user", content: prompt }]
  };
  
  // Î™®Îç∏Î≥Ñ ÌÜ†ÌÅ∞ ÌååÎùºÎØ∏ÌÑ∞ ÏÑ§Ï†ï
  payload[profile.params.maxTokensParam] = profile.params.maxTokens;
  
  // Ïò®ÎèÑ ÏÑ§Ï†ï (ÏßÄÏõêÌïòÎäî Î™®Îç∏Îßå)
  if (profile.params.supportsTemperature) {
    payload.temperature = profile.params.defaultTemperature;
  }
  
  // JSON ÌòïÏãù ÏßÄÏõê Ïó¨Î∂Ä
  if (profile.params.supportsJsonFormat) {
    payload.response_format = { type: "json_object" };
  }

  const response = UrlFetchApp.fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${apiKey}`,
      "Content-Type": "application/json"
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  if (response.getResponseCode() !== 200) {
    const errorText = response.getContentText();
    throw new Error(`OpenAI API Ïò§Î•ò: ${response.getResponseCode()} - ${errorText}`);
  }

  const data = JSON.parse(response.getContentText());
  const content = data.choices[0].message.content;
  
  // Î™®Îç∏ ÌîÑÎ°úÌååÏùºÏóê Îî∞Î•∏ ÏùëÎãµ Ï≤òÎ¶¨
  return processModelResponse(content, profile, topic);
}

/**
 * Google GeminiÎ°ú Í∏Ä ÏÉùÏÑ±
 */
function generateWithGemini(topic, apiKey, model = "gemini-1.5-flash") {
  const prompt = buildStructuredPrompt(topic);
  
  const payload = {
    contents: [{
      parts: [{ text: prompt }]
    }],
    generationConfig: {
      temperature: 0.7,
      maxOutputTokens: 4000,
      responseMimeType: "application/json"
    }
  };

  const response = UrlFetchApp.fetch(`https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  if (response.getResponseCode() !== 200) {
    throw new Error(`Gemini API Ïò§Î•ò: ${response.getResponseCode()}`);
  }

  const data = JSON.parse(response.getContentText());
  return JSON.parse(data.candidates[0].content.parts[0].text);
}

/**
 * Anthropic ClaudeÎ°ú Í∏Ä ÏÉùÏÑ±
 */
function generateWithClaude(topic, apiKey, model = "claude-3-5-haiku-20241022") {
  const prompt = buildStructuredPrompt(topic);
  
  const payload = {
    model: model,
    max_tokens: 4000,
    temperature: 0.7,
    messages: [{ role: "user", content: prompt }]
  };

  const response = UrlFetchApp.fetch("https://api.anthropic.com/v1/messages", {
    method: "POST",
    headers: {
      "x-api-key": apiKey,
      "Content-Type": "application/json",
      "anthropic-version": "2023-06-01"
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  if (response.getResponseCode() !== 200) {
    throw new Error(`Claude API Ïò§Î•ò: ${response.getResponseCode()}`);
  }

  const data = JSON.parse(response.getContentText());
  const content = data.content[0].text;
  
  // JSON Ï∂îÏ∂ú
  const jsonMatch = content.match(/\{[\s\S]*\}/);
  if (!jsonMatch) {
    throw new Error("Claude ÏùëÎãµÏóêÏÑú JSONÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§");
  }
  
  return JSON.parse(jsonMatch[0]);
}

/**
 * xAI GrokÏúºÎ°ú Í∏Ä ÏÉùÏÑ±
 */
function generateWithGrok(topic, apiKey, model = "grok-beta") {
  const prompt = buildStructuredPrompt(topic);
  
  const payload = {
    messages: [{ role: "user", content: prompt }],
    model: model,
    temperature: 0.7,
    max_tokens: 4000
  };

  const response = UrlFetchApp.fetch("https://api.x.ai/v1/chat/completions", {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${apiKey}`,
      "Content-Type": "application/json"
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  if (response.getResponseCode() !== 200) {
    throw new Error(`Grok API Ïò§Î•ò: ${response.getResponseCode()}`);
  }

  const data = JSON.parse(response.getContentText());
  const content = data.choices[0].message.content;
  
  // JSON Ï∂îÏ∂ú
  const jsonMatch = content.match(/\{[\s\S]*\}/);
  if (!jsonMatch) {
    throw new Error("Grok ÏùëÎãµÏóêÏÑú JSONÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§");
  }
  
  return JSON.parse(jsonMatch[0]);
}

/**
 * ÌÖçÏä§Ìä∏ÏóêÏÑú JSON Ï∂îÏ∂ú (Ìè¥Î∞± Ï≤òÎ¶¨)
 */
function extractJsonFromText(text) {
  try {
    Logger.log("=== AI ÏùëÎãµ ÎîîÎ≤ÑÍπÖ ===");
    Logger.log("ÏõêÎ≥∏ ÏùëÎãµ (Ï≤òÏùå 500Ïûê): " + text.substring(0, 500));
    
    // JSON Î∏îÎ°ù Ï∞æÍ∏∞ (```json ÎòêÎäî ``` ÏÇ¨Ïù¥)
    const jsonMatch = text.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/);
    if (jsonMatch) {
      Logger.log("ÏΩîÎìú Î∏îÎ°ùÏóêÏÑú JSON Î∞úÍ≤¨");
      const parsed = JSON.parse(jsonMatch[1]);
      Logger.log("ÌååÏã±Îêú Ï†úÎ™©: " + (parsed.title || "Ï†úÎ™© ÏóÜÏùå"));
      return parsed;
    }
    
    // Ï§ëÍ¥ÑÌò∏Î°ú ÎëòÎü¨Ïã∏Ïù∏ JSON Ï∞æÍ∏∞
    const braceMatch = text.match(/\{[\s\S]*\}/);
    if (braceMatch) {
      Logger.log("Ï§ëÍ¥ÑÌò∏ JSON Î∞úÍ≤¨");
      const parsed = JSON.parse(braceMatch[0]);
      Logger.log("ÌååÏã±Îêú Ï†úÎ™©: " + (parsed.title || "Ï†úÎ™© ÏóÜÏùå"));
      return parsed;
    }
    
    // Ìè¥Î∞±: Í∏∞Î≥∏ Íµ¨Ï°∞ ÏÉùÏÑ±
    Logger.log("‚ùå JSON Ï∂îÏ∂ú Ïã§Ìå® - Ìè¥Î∞± Íµ¨Ï°∞ ÏÉùÏÑ±");
    Logger.log("ÌÖçÏä§Ìä∏ ÏÉòÌîå: " + text.substring(0, 200));
    
    // ÌÖçÏä§Ìä∏ÏóêÏÑú Ï†úÎ™© Ï∂îÏ∂ú ÏãúÎèÑ
    const extractedTitle = extractTitle(text);
    const fallbackTitle = extractedTitle || "AI Generated Post";
    
    return {
      title: fallbackTitle,
      seoDescription: extractDescription(text) || "AI generated blog post",
      categories: ["General"],
      tags: ["ai", "generated"],
      subtopics: [],
      html: `<h2>${fallbackTitle}</h2><p>${text.replace(/\n/g, '</p><p>')}</p>`
    };
  } catch (error) {
    Logger.log("‚ùå JSON Ï∂îÏ∂ú Ï§ë Ïò§Î•ò: " + error.message);
    Logger.log("‚ùå ÏõêÎ≥∏ ÌÖçÏä§Ìä∏: " + text.substring(0, 300));
    throw new Error("AI ÏùëÎãµÏùÑ Ï≤òÎ¶¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§: " + error.message);
  }
}

/**
 * ÌÖçÏä§Ìä∏ÏóêÏÑú Ï†úÎ™© Ï∂îÏ∂ú
 */
function extractTitle(text) {
  const titleMatch = text.match(/(?:title|Ï†úÎ™©):\s*["']?([^"'\n]+)["']?/i);
  return titleMatch ? titleMatch[1].trim() : null;
}

/**
 * ÌÖçÏä§Ìä∏ÏóêÏÑú ÏÑ§Î™Ö Ï∂îÏ∂ú
 */
function extractDescription(text) {
  const descMatch = text.match(/(?:description|ÏÑ§Î™Ö):\s*["']?([^"'\n]+)["']?/i);
  return descMatch ? descMatch[1].trim() : null;
}

/**
 * Î©îÏù∏ AI Í∏Ä ÏÉùÏÑ± Ìï®Ïàò (Îã®Ïùº AI ÏÑ†ÌÉù)
 */
function generateHtml(topic) {
  const config = getConfig();
  
  if (!config.AI_API_KEY) {
    throw new Error("AI_API_KEYÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
  }
  
  // Î™®Îç∏ ÌîÑÎ°úÌååÏùº Ï†ïÎ≥¥ Î°úÍ∑∏
  const modelProfile = getModelProfile(config.AI_MODEL);
  
  Logger.log(`=== AI Í∏Ä ÏÉùÏÑ± ÏãúÏûë (ÌîÑÎ°úÌååÏùº Í∏∞Î∞ò) ===`);
  Logger.log(`Ï£ºÏ†ú: ${topic}`);
  Logger.log(`AI Ï†úÍ≥µÏûê: ${config.AI_PROVIDER}`);
  Logger.log(`Î™®Îç∏: ${config.AI_MODEL}`);
  Logger.log(`JSON Ïã†Î¢∞ÎèÑ: ${modelProfile.capabilities.jsonReliability}`);
  Logger.log(`ÏùëÎãµ ÌòïÏãù: ${modelProfile.capabilities.responseFormat}`);
  Logger.log(`Ïû¨ÏãúÎèÑ ÌöüÏàò: ${modelProfile.strategy.retryAttempts}`);
  
  let lastError = null;
  
  // Î™®Îç∏ ÌîÑÎ°úÌååÏùºÏóê Îî∞Î•∏ Ïû¨ÏãúÎèÑ Î°úÏßÅ
  for (let attempt = 1; attempt <= modelProfile.strategy.retryAttempts; attempt++) {
    try {
      Logger.log(`ÏãúÎèÑ ${attempt}/${modelProfile.strategy.retryAttempts}`);
      let result;
      
      switch (config.AI_PROVIDER) {
        case 'openai':
          result = generateWithOpenAI(topic, config.AI_API_KEY, config.AI_MODEL);
          break;
          
        case 'gemini':
          result = generateWithGemini(topic, config.AI_API_KEY, config.AI_MODEL);
          break;
          
        case 'anthropic':
          result = generateWithClaude(topic, config.AI_API_KEY, config.AI_MODEL);
          break;
          
        case 'xai':
          result = generateWithGrok(topic, config.AI_API_KEY, config.AI_MODEL);
          break;
          
        default:
          throw new Error(`ÏßÄÏõêÌïòÏßÄ ÏïäÎäî AI Ï†úÍ≥µÏûê: ${config.AI_PROVIDER}`);
      }
      
      // ÏÑ±Í≥µÌïòÎ©¥ Í≤∞Í≥º Í≤ÄÏ¶ù ÌõÑ Î∞òÌôò
      if (result && result.title && result.html) {
        Logger.log(`‚úÖ ÏãúÎèÑ ${attempt}ÏóêÏÑú ÏÑ±Í≥µ`);
        return validateAndCleanResult(result, topic, modelProfile);
      } else {
        throw new Error("Î∂àÏôÑÏ†ÑÌïú ÏùëÎãµ (Ï†úÎ™© ÎòêÎäî ÎÇ¥Ïö© ÎàÑÎùΩ)");
      }
      
    } catch (error) {
      lastError = error;
      Logger.log(`‚ùå ÏãúÎèÑ ${attempt} Ïã§Ìå®: ${error.message}`);
      
      if (attempt < modelProfile.strategy.retryAttempts) {
        Logger.log(`${attempt + 1}Î≤àÏß∏ ÏãúÎèÑ Ï§ÄÎπÑ Ï§ë...`);
        Utilities.sleep(1000); // 1Ï¥à ÎåÄÍ∏∞
      }
    }
  }
  
  // Î™®Îì† ÏãúÎèÑ Ïã§Ìå® Ïãú ÏµúÏ¢Ö Ìè¥Î∞±
  Logger.log(`‚ùå Î™®Îì† ÏãúÎèÑ Ïã§Ìå®, ÏµúÏ¢Ö Ìè¥Î∞± Î™®Îìú Ïã§Ìñâ`);
  Logger.log(`ÎßàÏßÄÎßâ Ïò§Î•ò: ${lastError ? lastError.message : 'Ïïå Ïàò ÏóÜÏùå'}`);
  
  return createFallbackStructure(topic, `Failed after ${modelProfile.strategy.retryAttempts} attempts. Last error: ${lastError ? lastError.message : 'Unknown'}`);
}

/**
 * Í≤∞Í≥º Í≤ÄÏ¶ù Î∞è Ï†ïÎ¶¨
 */
function validateAndCleanResult(result, topic, modelProfile) {
  Logger.log("=== Í≤∞Í≥º Í≤ÄÏ¶ù Î∞è Ï†ïÎ¶¨ ===");
  
  // Ï†úÎ™© Í≤ÄÏ¶ù
  if (!result.title || result.title.trim() === "" || result.title === "Blog Post") {
    Logger.log("‚ö†Ô∏è Ï†úÎ™© Î≥¥Ï†ï: Ï£ºÏ†ú ÏÇ¨Ïö©");
    result.title = topic;
  }
  
  // ÎÇ¥Ïö© Í≤ÄÏ¶ù
  if (!result.html || result.html.trim() === "") {
    Logger.log("‚ö†Ô∏è ÎÇ¥Ïö© Î≥¥Ï†ï: Í∏∞Î≥∏ Íµ¨Ï°∞ ÏÉùÏÑ±");
    result.html = `<h2>${result.title}</h2><p>This comprehensive article explores ${topic} and provides valuable insights.</p>`;
  }
  
  // SEO ÏÑ§Î™Ö Í≤ÄÏ¶ù
  if (!result.seoDescription || result.seoDescription.trim() === "") {
    result.seoDescription = `Learn about ${topic} and discover valuable insights.`;
  }
  
  // Ïπ¥ÌÖåÍ≥†Î¶¨ Í≤ÄÏ¶ù
  if (!result.categories || !Array.isArray(result.categories) || result.categories.length === 0) {
    result.categories = ["General"];
  }
  
  // ÌÉúÍ∑∏ Í≤ÄÏ¶ù
  if (!result.tags || !Array.isArray(result.tags) || result.tags.length === 0) {
    result.tags = ["information", "guide"];
  }
  
  Logger.log(`‚úÖ Í≤ÄÏ¶ù ÏôÑÎ£å: ${result.title}`);
  Logger.log(`HTML Í∏∏Ïù¥: ${result.html.length}Ïûê`);
  Logger.log(`Ïπ¥ÌÖåÍ≥†Î¶¨: ${result.categories.join(', ')}`);
  Logger.log(`ÌÉúÍ∑∏: ${result.tags.join(', ')}`);
  
  return result;
}

/**
 * Î™®Îç∏ Ï∂îÏ≤ú Ìï®Ïàò
 */
function getRecommendedModel() {
  const recommendations = {
    'gpt-5-mini': {
      reason: 'üöÄ ÏµúÏã† GPT-5 Í∏∞Ïà†, Ïö∞ÏàòÌïú ÌíàÏßà, Ìï©Î¶¨Ï†Å ÎπÑÏö© (Ï∂îÏ≤ú!)',
      score: 98
    },
    'gpt-5-nano-2025-08-07': {
      reason: 'üöÄ ÏµúÏã† GPT-5 Í∏∞Ïà†, Ï¥àÏ†ÄÎπÑÏö©, Í∞úÏÑ†Îêú ÌîÑÎ°¨ÌîÑÌä∏Î°ú ÌíàÏßà Ìñ•ÏÉÅ',
      score: 85
    },
    'gpt-4o-mini': {
      reason: 'Í≤ÄÏ¶ùÎêú ÏïàÏ†ïÏÑ±, ÎÜíÏùÄ ÌíàÏßà, Ï†ÅÎãπÌïú ÎπÑÏö©',
      score: 90
    },
    'gpt-4o': {
      reason: 'ÏµúÍ≥† ÌíàÏßà, ÏôÑÎ≤ΩÌïú JSON ÏùëÎãµ, ÎÜíÏùÄ ÎπÑÏö©',
      score: 85
    },
    'gemini-1.5-flash': {
      reason: 'Îπ†Î•∏ ÏùëÎãµ, Ï¢ãÏùÄ ÌíàÏßà, Ï†ÄÎ†¥Ìïú ÎπÑÏö©',
      score: 80
    },
    'claude-3-5-haiku-20241022': {
      reason: 'Ïö∞ÏàòÌïú ÌíàÏßà, JSON ÌååÏã± ÌïÑÏöî, Ï§ëÍ∞Ñ ÎπÑÏö©',
      score: 75
    },
    'grok-beta': {
      reason: 'Ï∞ΩÏùòÏ†Å ÎÇ¥Ïö©, JSON ÌååÏã± ÌïÑÏöî, Ï§ëÍ∞Ñ ÎπÑÏö©',
      score: 70
    }
  };
  
  Logger.log("=== üöÄ GPT-5 Ïö∞ÏÑ† Î™®Îç∏ Ï∂îÏ≤ú ===");
  Object.entries(recommendations).forEach(([model, info]) => {
    Logger.log(`${model}: ${info.reason} (Ï†êÏàò: ${info.score})`);
  });
  
  return 'gpt-5-mini'; // GPT-5 mini Ïö∞ÏÑ† Ï∂îÏ≤ú
}

/**
 * AI ÏÉùÏÑ± ÌÖåÏä§Ìä∏ Ìï®Ïàò
 */
function testAIGeneration() {
  Logger.log("=== AI ÏÉùÏÑ± ÌÖåÏä§Ìä∏ ÏãúÏûë ===");
  
  try {
    const testTopic = "ÌÖåÏä§Ìä∏ Ï£ºÏ†ú";
    const result = generateHtml(testTopic);
    
    Logger.log("=== ÌÖåÏä§Ìä∏ Í≤∞Í≥º ===");
    Logger.log(`Ï†úÎ™©: ${result.title}`);
    Logger.log(`ÏÑ§Î™Ö: ${result.seoDescription}`);
    Logger.log(`Ïπ¥ÌÖåÍ≥†Î¶¨: ${JSON.stringify(result.categories)}`);
    Logger.log(`ÌÉúÍ∑∏: ${JSON.stringify(result.tags)}`);
    Logger.log(`HTML ÎÇ¥Ïö© (Ï≤òÏùå 200Ïûê): ${result.html.substring(0, 200)}...`);
    
    return result;
  } catch (error) {
    Logger.log("‚ùå AI ÏÉùÏÑ± ÌÖåÏä§Ìä∏ Ïã§Ìå®: " + error.message);
    throw error;
  }
}